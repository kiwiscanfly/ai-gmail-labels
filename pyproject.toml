[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "email-categorization-agent"
version = "1.0.0"
description = "AI-powered email categorization using local LLMs and multi-agent architecture"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Communications :: Email",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["email", "categorization", "ai", "agents", "ollama", "gmail", "mcp"]
requires-python = ">=3.13"

# Core dependencies
dependencies = [
    # Agent Framework
    "langgraph>=0.2.0",
    "langchain>=0.3.0",
    "langchain-core>=0.3.0",
    # LLM Integration
    "ollama>=0.3.0",
    # Gmail API
    "google-api-python-client>=2.100.0",
    "google-auth-httplib2>=0.2.0",
    "google-auth-oauthlib>=1.0.0",
    "google-auth>=2.20.0",
    # Database
    "aiosqlite>=0.20.0",
    "sqlalchemy>=2.0.0",
    # Async Support
    "asyncio-mqtt>=0.16.0",
    "aiohttp>=3.9.0",
    "uvicorn>=0.30.0",
    # Configuration and Validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-dotenv>=1.0.0",
    "PyYAML>=6.0.0",
    # Logging and Monitoring
    "structlog>=23.2.0",
    "psutil>=5.9.0",
    # Retry and Circuit Breaker
    "tenacity>=8.2.0",
    "circuitbreaker>=2.0.0",
    # Security
    "keyring>=24.3.0",
    "cryptography>=41.0.0",
    # Utilities
    "click>=8.1.0",
    "rich>=13.7.0",
    "typer>=0.12.0",
    "httpx>=0.27.0",
    "jinja2>=3.1.0",
    # Time and Date
    "python-dateutil>=2.8.0",
    "pytz>=2023.3",
    "mcp>=1.10.1",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "bandit>=1.7.5",
    "safety>=2.3.0",
]

# Testing dependencies
test = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xdist>=3.3.0",
    "faker>=19.6.0",
    "factory-boy>=3.3.0",
    "respx>=0.20.0",
    "aioresponses>=0.7.0",
]

# Documentation dependencies
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]

# Production dependencies
prod = [
    "gunicorn>=21.2.0",
    "uvloop>=0.19.0",
    "orjson>=3.9.0",
    "prometheus-client>=0.18.0",
    "sentry-sdk>=1.32.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/email-categorization-agent"
Repository = "https://github.com/yourusername/email-categorization-agent"
Documentation = "https://email-categorization-agent.readthedocs.io"
Issues = "https://github.com/yourusername/email-categorization-agent/issues"

[project.scripts]
email-agent = "src.cli:main"
email-categorizer = "src.mcp.server:main"

[tool.uv]
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml", "*.md"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# mypy configuration
[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "ollama.*",
    "mcp.*",
    "google.*",
    "googleapiclient.*",
    "oauth2client.*",
    "tenacity.*",
    "circuitbreaker.*",
    "keyring.*",
    "structlog.*",
    "psutil.*",
    "langgraph.*",
    "langchain.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "src/cli.py",
    "*/tests/*",
    "*/test_*",
    "setup.py",
    "conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    ".venv",
    "venv",
    ".eggs",
    "*.egg",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]
